
from __future__ import print_function
from absl import app
import os
from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import RMSprop
import DR_cnn as DR

base_image_dir ='/Users/alicemartin/000_Boulot_Polytechnique/01_Research_Projects/Projet-Google-Uncertainty-quantification-in-DL-N.Brosse/datasets'


def input_data(base_image_dir, method='categorical'):

  # Preprocessing the Labels csv file
  df_images_train=DR.pre_processing_labels(base_image_dir)
  df_images_test=DR.pre_processing_labels(base_image_dir,is_training=False)

  # upsampling to take care of the umbalanced dataset
  df_images_train_up=DR.upsampling_dataset(df_images_train, method=method)
  X_train, y_train=DR.load_data(df_images_train_up, method=method)
  X_test, y_test=DR.load_data(df_images_test, method=method)

  return X_train, y_train, X_test, y_test

def split_train_val(X_train, y_train, val_size=0.2):
  samples=X_train.shape[0]
  val_samples=int(val_size*samples)

  X_train=X_train[:samples-val_samples]
  y_train = y_train[:samples - val_samples]
  X_val=X_train[-val_samples:]
  y_val=y_train[-val_samples:]

  return X_train, y_train, X_val, y_val

def main(argv):
  method=argv[0]

  base_image_dir = '/Users/alicemartin/000_Boulot_Polytechnique/01_Research_Projects/Projet-Google-Uncertainty-quantification-in-DL-N.Brosse/datasets'
  X_train, y_train, X_test, y_test=input_data(base_image_dir)

  X_train, y_train, X_val, y_val=split_train_val(X_train, y_train)

  traindatagenerator = ImageDataGenerator(width_shift_range=0.1,
                                          height_shift_range=0.1,
                                          rotation_range=15,
                                          zoom_range=0.1,
                                          rescale=1. / 255)

  # parameters
  input_shape = (X_train.shape[1], X_train.shape[2], X_train.shape[3])
  num_classes = y_train.shape[1]

  model = DR.build_model(input_shape, num_classes)

  traindatagenerator.fit(X_train)

  # training parameters
  batch_size = 32
  epochs = 20
  opt = RMSprop()

  model.compile(loss='categorical_crossentropy',
                optimizer=opt,
                metrics=['accuracy'])

  # Fit the model on the batches generated by datagen.flow().
  model.fit_generator(traindatagenerator.flow(X_train, y_train,
                                              batch_size=batch_size),
                      epochs=epochs,
                      steps_per_epoch=X_train.shape[0] // batch_size,
                      validation_data=(X_test, y_test))

  # save the model
  model_path = base_image_dir
  model_name = 'DR_categorical_%03d_%s.h5' % epochs, method
  model_path = os.path.join(model_path, model_name)
  model.save(model_path)
  print('Saved trained model at %s ' % model_path)

  # Score trained model.
  scores = model.evaluate(X_test, y_test, verbose=1)
  print('Test loss:', scores[0])
  print('Test accuracy:', scores[1])


if __name__ == '__main__':
  app.run(main, argv=['binary'])